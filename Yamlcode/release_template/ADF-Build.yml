parameters:
  - name: projectPath
  #- name: rootFolder
  - name: sourceFactoryPath
  - name: enabled
    type: boolean


jobs:
  - job: Creating
    displayName: "Creating Artifact"
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
        displayName: 'Install Node.js'

      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: '${{ parameters.projectPath }}'
          verbose: true
        displayName: 'Install npm package'

# Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
# Enter the appropriate subscription and name for the source factory.

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: '${{ parameters.projectPath }}' #package.json folder
          customCommand: 'run build validate ${{ parameters.projectPath }} ${{ parameters.sourceFactoryPath }}'
        displayName: 'Validate'

# Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
# The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: '${{ parameters.projectPath }}'
          customCommand: 'run build export ${{ parameters.projectPath }} ${{ parameters.sourceFactoryPath }} "artifacts"'  
        displayName: 'Validate and Generate ARM template'

# Publish the artifact to be used as a source for a release pipeline.
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'tall'
          workingDir: '${{ parameters.projectPath }}/artifacts'
          Contents: '**'
          TargetFolder: '$(build.artifactstagingdirectory)/application'
        displayName: 'Copying application artifact'


      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(build.artifactstagingdirectory)'
          artifact: 'datafactory'
          publishLocation: 'pipeline'

      # - task: Folder values
      #   inputs:
      #     targetType: 'inline'
      #     script: 'env | sort'

      - powershell: |
          tree "$(build.artifactstagingdirectory)" /F
        displayName: "Treeview of build.artifactstagingdirectory"
